Oracle SQL Query to read Blob and CLOB data in readable format
ChatGPT said:
In Oracle SQL, you can read BLOB and CLOB data using either PL/SQL or by leveraging built-in functions like DBMS_LOB.SUBSTR() for CLOBs, and UTL_RAW.CAST_TO_VARCHAR2() for BLOBs (if the BLOB contains text data). Here's how you can do it:

üìù For CLOB Data:
Use DBMS_LOB.SUBSTR() to read the contents of a CLOB.

sql
Copy
Edit
SELECT 
  DBMS_LOB.SUBSTR(clob_column, 4000, 1) AS clob_data
FROM your_table
WHERE your_conditions;
4000 is the number of characters you want to read (max 4000 in SQL).

1 is the starting position.

üîπ If the CLOB is longer than 4000 characters, you may need to read it in chunks using PL/SQL.

üìù For BLOB Data Containing Text:
If the BLOB contains plain text (e.g., XML, JSON), convert it to a readable format:

sql
Copy
Edit
SELECT 
  UTL_RAW.CAST_TO_VARCHAR2(DBMS_LOB.SUBSTR(blob_column, 4000, 1)) AS blob_data
FROM your_table
WHERE your_conditions;
‚ö†Ô∏è This only works if the BLOB contains text in a character set compatible with your session (e.g., ASCII or UTF-8).

‚úÖ Full Example:
sql
Copy
Edit
SELECT 
  id,
  DBMS_LOB.SUBSTR(clob_col, 4000, 1) AS clob_text,
  UTL_RAW.CAST_TO_VARCHAR2(DBMS_LOB.SUBSTR(blob_col, 4000, 1)) AS blob_text
FROM your_table
WHERE ROWNUM <= 10;
üí° Tips:
Use PL/SQL or a programming language (Python, Java, etc.) to read the full data if it's larger than 4000 characters/bytes.

In SQL Developer, you can also right-click a BLOB/CLOB cell and choose "View as Text" or "Export Blob".

If you want a PL/SQL version that loops through and reads full data from CLOB/BLOB, let me know and I‚Äôll drop that too.







You said:
Share PLSQL to read complete BLOB and CLOB Data and Python


ChatGPT said:
Sure! Here's a PL/SQL script to read complete BLOB and CLOB data from a table, and a Python script using cx_Oracle to do the same ‚Äî properly handling long data.

üü¶ PL/SQL: Read Complete CLOB and BLOB
üîπ Read Full CLOB
sql
Copy
Edit
DECLARE
  v_clob     CLOB;
  v_output   VARCHAR2(32767);
  v_offset   INTEGER := 1;
  v_chunk    INTEGER := 32767;
BEGIN
  SELECT clob_column INTO v_clob FROM your_table WHERE id = 123;  -- Modify your WHERE clause

  WHILE v_offset <= DBMS_LOB.GETLENGTH(v_clob) LOOP
    v_output := DBMS_LOB.SUBSTR(v_clob, v_chunk, v_offset);
    DBMS_OUTPUT.PUT_LINE(v_output); -- You may redirect it to a file or temp table
    v_offset := v_offset + v_chunk;
  END LOOP;
END;
/
üîπ Read Full BLOB (as text)
sql
Copy
Edit
DECLARE
  v_blob       BLOB;
  v_raw        RAW(32767);
  v_text       VARCHAR2(32767);
  v_offset     INTEGER := 1;
  v_chunk_size INTEGER := 32767;
BEGIN
  SELECT blob_column INTO v_blob FROM your_table WHERE id = 123;  -- Modify accordingly

  WHILE v_offset <= DBMS_LOB.GETLENGTH(v_blob) LOOP
    v_raw := DBMS_LOB.SUBSTR(v_blob, v_chunk_size, v_offset);
    v_text := UTL_RAW.CAST_TO_VARCHAR2(v_raw);
    DBMS_OUTPUT.PUT_LINE(v_text);
    v_offset := v_offset + v_chunk_size;
  END LOOP;
END;
/
üîπ Make sure the BLOB stores text data. This won‚Äôt work properly with binary formats like images.

üêç Python: Read CLOB and BLOB with cx_Oracle
‚úÖ Install dependency
bash
Copy
Edit
pip install cx_Oracle
üîπ Python Script
python
Copy
Edit
import cx_Oracle

# Connection
conn = cx_Oracle.connect("user", "password", "host:port/service_name")
cur = conn.cursor()

# Fetch CLOB
cur.execute("SELECT clob_column FROM your_table WHERE id = :id", {'id': 123})
clob = cur.fetchone()[0]
if clob:
    print("CLOB Data:\n", clob.read())

# Fetch BLOB
cur.execute("SELECT blob_column FROM your_table WHERE id = :id", {'id': 123})
blob = cur.fetchone()[0]
if blob:
    blob_data = blob.read()
    try:
        # Assume blob stores text
        print("BLOB Data:\n", blob_data.decode('utf-8'))
    except UnicodeDecodeError:
        print("BLOB Data is not valid UTF-8 text!")

cur.close()
conn.close()
üîí Tips:
Replace host:port/service_name with your TNS or connection string.

For large BLOB/CLOB, Python handles streaming reads automatically with .read().