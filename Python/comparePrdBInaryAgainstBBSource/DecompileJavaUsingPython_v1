import os
import subprocess
import configparser

def decompile_class_files(input_dir, output_dir, decompiler, decompiler_path):
    # Ensure the output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Walk through the input directory recursively
    for root, _, files in os.walk(input_dir):
        for file in files:
            if file.endswith(".class"):
                class_file_path = os.path.join(root, file)
                relative_path = os.path.relpath(class_file_path, input_dir)
                java_file_path = os.path.join(output_dir, relative_path.replace(".class", ".java"))

                # Ensure the directory for the Java file exists
                os.makedirs(os.path.dirname(java_file_path), exist_ok=True)

                # Decompile the class file to a Java file using the specified decompiler
                if decompiler == "javap":
                    subprocess.run([decompiler_path, "-c", "-p", "-s", "-v", "-l", "--constants", class_file_path], stdout=open(java_file_path, 'w'))
                elif decompiler == "jd-cli":
                    subprocess.run([decompiler_path, class_file_path, "-od", os.path.dirname(java_file_path)])
                elif decompiler == "jd-gui":
                    subprocess.run([decompiler_path, class_file_path, "-od", os.path.dirname(java_file_path)])
                else:
                    print(f"Unknown decompiler option: {decompiler}")

# Read the INI file to get the configuration
config = configparser.ConfigParser()
config.read('config.ini')

# Get the configuration values from the INI file
input_directory = config['Paths']['input_directory']
output_directory = config['Paths']['output_directory']
decompiler_option = config['Decompiler']['option']
decompiler_path = config['Decompiler'][f'{decompiler_option}_path']

# Decompile the class files using the specified option and path
decompile_class_files(input_directory, output_directory, decompiler_option, decompiler_path)

print("Decompilation completed.")